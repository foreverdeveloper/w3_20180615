플러그인의 정의
	jQuery 기능을 확장하는 방법으로 제공되는 메커니즘
	jQuery의 다양한 기능을 쉽게 사용할 수 있도록 제공해주는 라이브러리

플러그인 사용방법 :
	jQuery를 사용하기 위한 코드
	→ 플러그인을 사용하기 위한 코드
	→ 플러그인 생성 및 확장

	<script src=../js/jquery.js” type=“text/javascript”></script>
	<script src=“media/js/jquery.dataTables.js” type=“text/javascript”></script>
	<script type=“text/javascript”>
	$(function(){
	$(‘#example’).dataTable();
	});

플러그인 개발
	플러그인 유형 : 유틸리티 함수, 확장 집합 메소드
	유틸리티 함수
		$에 정의되는 유틸리티 함수 형태는 일종의 정적(전역) 메소드
			$.MethodName()
			ex) $.Methodname = function(){...}
				=> $.say = function(what){ alert('I Say ' + what); }

	확장 집합 메소드
		jQuery 확장 집합에서 동작하는 메소드로 객체 인스턴스의 메소드
			$(“#id”).MethodName()
			ex) $.fn.MethodName = function(){...}
				=> $.fn.swapClass = function(class1, class2){

	플러그인 파일명 규칙
		고유한 명칭을 중간이름으로 사용함
		ex) jQuery.dataTable-1.0.js

	jQuery에서의 별칭 사용
		코드 작성시 편리함
		$로 작성된 코드가 읽기 편함
		예)  $("h1#example1") , $("h2.example2")
		css에서 h1 #example1{}, h2 .example2 {}
		html에서 <h1 id="example1"/>,  <h2 class="example2" />

	플러그인에서의 별칭 사용
		완성된 플러그인이 배포되어 다른 환경에서 사용될 경우
		- $.noConflict() 메소드를 사용하여 '$' 별칭을 모두 양도한다면
			$.say = function(what) { alert(‘I say ‘ + what); } 는 사용 불가하나
			아래로는 사용 가능

		jquery.say = function(what) { alert(‘I say ‘ + what); }


 플러그인 제작
 	jQuery 네임스페이스의 함수 = 전역 함수
 		일반 전역함수와의 충돌 가능성 없음
 		jQuery 메소드와 이름이 충돌하지 않도록 주의함

	jQuery 라이브러리에서 제공하는 전역함수
		$.each(), $.map(), $.grep()

	배열을 받아 합계를 리턴하는 함수와 평균을 리턴하는 함수 만들기

		(function ($) {
			$.sum = function(array) {
				var total = 0;
				$.each(array, function(index, value) {
				value = $.trim(value);
				value = parseFloat(value) || 0;
				total += value;
			});
			return total;
		};
		})(jQuery);

		(function ($) {
			$.average = function(array) {
				if($.isArray(array)) {
					return $.sum(array) / array.length;
				}
				return '';
			};
		})(jQuery);

	 플러그인 제작
	 	전역 함수의 캡슐화
	 		jQuery(제이쿼리) 네임 스페이스 내에서 같은 이름을 갖는 함수가
	 		존재할 경우 충돌 가능성이 있음

				(function ($) {
					$.mathUtils = {
						sum: function(array) {
							var total = 0;
							$.each(array, function(index, value) {
								value = $.trim(value);
								value = parseFloat(value) || 0;
								total += value;
							});
							return total;
						},
						average: function(array) {
							if($.isArray(array)) {
								return $.sum(array) / array.length;
							}
							return '';
						}
					};
				})(jQuery)

			jQuery.mathUtils 네임스페이스를 생성
			함수는 jQuery 객체의 프로퍼티인 mathUtils 객체의 메소드가 됨
				$.mathUtils.sum(sum);
				$.mathUtils.average(average);
				형태로 사용


		객체 메소드
				(function($) {
					$.fn.swapClass = function(class1, class2) {
						if (this.hasClass(class1)) {
							this.removeClass(class1).addClass(class2);
						}
						else if (this.hasClass(class2)) {
							this.removeClass(class2).addClass(class1);
						}
					};
				})(jQuery);

				ex) $<'div'>.swapclass('one', 'two');


		묵시적 반복
			객체 메소드
				최초의 <div> 엘리먼트만 적용
			jQuery 함수
				다수의 엘리먼트에 함수의 기능 적용

			=> 플러그인 설계 시 jQuery 선택자가 복수인 경우를 감안하여
			.each() 메소드를 이용함

			function($) {
				$.fn.swapClass = function(class1, class2) {
					this.each(function() {		// this는 jQuery 객체를 의미
						var $element = $(this);	// this는 DOM 요소를 의미
						if ($element.hasClass(class1)) {
							$element.removeClass(class1).addClass(class2);
						}
						else if ($element.hasClass(class2)) {
							$element.removeClass(class2).addClass(class1);
						}
					});
				};
			})(jQuery);

플러그인 제작
	메소드 체인
		간결한 코드
		기존 jQuery 메소드들과 일관성 유지
		개발자들이 쉽게 이해하고 사용할 수 있음

			function($) {
				$.fn.swapClass = function(class1, class2) {
					return this.each(function() {
						var $element = $(this);
						if ($element.hasClass(class1)) {
							$element.removeClass(class1).addClass(class2);
						}
						else if ($element.hasClass(class2)) {
							$element.removeClass(class2).addClass(class1);
						}
					});
				};
			})(jQuery);

jQuery UI 플러그인의 특징
	서로 잘 동작하고 사용하기 쉬움
	접근이 용이하고 확장이 가능함
	테마의 적용이 가능함
	풍부한 웹 인터페이스와 리치 인터넷 응용 프로그램 제작에 용이함

jQuery UI의 기능
	상호작용 : Draggable, Droppable, Resizable, Selectable, Sortable
	위젯 : Accordion, Button, Dialog, Progressbar, Slider, Tabs
	유틸리티 : Position
	효과 : Blind, bounce, clip, fold, highlight, shake, Color 애니메이션 등

 jQuery UI 플러그인
	Drag & Drop
		Draggable : 선택한 모든 것을 마우스로 드래그
		Droppable : 드래그 가능한 아이템의 목적지에 대한 엘리먼트에 적용

		<body>
		<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
		<img id="drag1" src="img_logo.gif" draggable="true"
		ondragstart="drag(event)" width="336" height="69">
		</body>

	Datepicker
		날짜를 선택해야 할 때 사용
		ex) 회원 가입, 비행기 예매
		적용방법 : Input 태그에 Datepicker()를 호출
			<script>
				$(function() {
				$( "#datepicker" ).datepicker();
				});
			</script>
			<input type="text" id="datepicker" >





























